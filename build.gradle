plugins {
    id 'java'
    id 'application'
}

group = 'org.korecky'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'org.korecky.jiracli.Main'
}

repositories {
    mavenCentral()
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    // Testing
    testImplementation 'org.testng:testng:7.10.2'
    testImplementation 'org.mockito:mockito-core:5.12.0'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    runtimeOnly 'com.lmax:disruptor:3.4.4'

    // Application Libraries
    // For parsing command-line arguments.
    implementation 'commons-cli:commons-cli:1.8.0'
    // For making HTTP requests to the Jira API.
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    // Jackson for handling JSON (from Jira API) and YAML (for config file).
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.1'
    // Apache POI for creating and manipulating Microsoft Office files (e.g., Excel).
    implementation 'org.apache.poi:poi-ooxml:5.4.1'
}

configurations.all {
    resolutionStrategy {
        // Force all Log4j 2 modules to use the same version to prevent NoSuchMethodError
        eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.apache.logging.log4j') {
                details.useVersion '2.23.1'
            }
        }
    }
}

// Configure the test task to use TestNG as the test runner.
test {
    useTestNG()
}

// This task will create a runnable JAR with all dependencies included.
// You can run it with: ./gradlew shadowJar
//plugins {
//    id 'com.github.johnrengelman.shadow' version '8.1.1'
//}